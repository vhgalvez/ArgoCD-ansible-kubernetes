# playbooks/03_install_argocd.yml
---
- name: 🚀 Instalar ArgoCD con Ingress y contraseña personalizada
  hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    - ../group_vars/all.yml

  tasks:
    - name: 🔐 Generar contraseña base64 para ArgoCD
      set_fact:
        argocd_admin_password_b64: "{{ argocd_admin_password | b64encode }}"

    - name: 📦 Crear namespace para ArgoCD
      kubernetes.core.k8s:
        name: "{{ argocd_namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: "{{ kubeconfig_path }}"

    - name: 🔑 Crear Secret con contraseña personalizada
      kubernetes.core.k8s:
        state: present
        namespace: "{{ argocd_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: argocd-secret
            labels:
              app.kubernetes.io/name: argocd-secret
              app.kubernetes.io/part-of: argocd
          type: Opaque
          data:
            admin.password: "{{ argocd_admin_password_b64.stdout }}"
            admin.passwordMtime: "{{ lookup('pipe', 'date +%FT%T%Z') | b64encode }}"

    - name: 📥 Desplegar manifiestos oficiales de ArgoCD
      kubernetes.core.k8s:
        state: present
        namespace: "{{ argocd_namespace }}"
        src: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        kubeconfig: "{{ kubeconfig_path }}"

    - name: 🌐 Crear Ingress HTTPs para acceso externo con Traefik
      kubernetes.core.k8s:
        state: present
        namespace: "{{ argocd_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: argocd-ingress
            annotations:
              kubernetes.io/ingress.class: traefik
              traefik.ingress.kubernetes.io/router.entrypoints: websecure
              traefik.ingress.kubernetes.io/router.tls: "true"
          spec:
            rules:
              - host: "{{ argocd_dashboard_domain }}"
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: argocd-server
                          port:
                            number: 80
            tls:
              - hosts:
                  - "{{ argocd_dashboard_domain }}"
                secretName: "{{ tls_secret_name }}"