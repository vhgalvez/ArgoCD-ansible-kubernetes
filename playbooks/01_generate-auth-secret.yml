# playbooks\01_generate-auth-secret.yml
---
# 🔐 Generar y sellar el Secret de autenticación básica para el Dashboard de Argo CD
- name: 🔐 Generar y sellar el Secret de basic-auth para el Dashboard de Argo CD
  hosts: localhost
  gather_facts: false          # ↪️ Desactivado, pero recogeremos subset 'min'
  become: false

  vars_files:
    - ../vars/main.yml         # ← define argocd_namespace, argocd_auth_user, etc.

  vars:
    files_dir: "{{ playbook_dir }}/files"
    secret_template: "../templates/secrets/basic-auth-secret.yaml.j2"
    unsealed_secret_path: "{{ files_dir }}/argocd-dashboard-secret-unsealed.yaml"
    sealed_secret_path:   "{{ files_dir }}/argocd-dashboard-sealed.yaml"
    argocd_secret_name:   "argocd-dashboard-auth"

  ########################################################################
  # 0. Preparación
  ########################################################################
  pre_tasks:
    - name: 📊 Recoger facts mínimos
      ansible.builtin.setup:
        gather_subset:
          - '!all'
          - 'min'

    - name: 🛠️ Asegurar namespace {{ argocd_namespace }}
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ argocd_namespace }}"
        state: present
        kubeconfig: "{{ kubeconfig_path }}"

  ########################################################################
  # 1. Verificaciones previas
  ########################################################################
  tasks:
    - name: 📋 Verificar kubeseal instalado
      stat:
        path: "{{ kubeseal_path }}"
      register: kubeseal_check

    - name: ❌ Abortar si falta kubeseal
      fail:
        msg: "kubeseal no está en {{ kubeseal_path }}."
      when: not kubeseal_check.stat.exists

    - name: ⚙️ Comprobar variables obligatorias
      fail:
        msg: "Las variables argocd_auth_user y argocd_auth_pass deben definirse y no estar vacías."
      when: argocd_auth_user | default('') | length == 0 or
            argocd_auth_pass | default('') | length == 0

  ########################################################################
  # 2. Instalar utilidades htpasswd
  ########################################################################
    - name: 📦 Instalar paquete htpasswd adecuado
      ansible.builtin.package:
        name: "{{ 'httpd-tools' if ansible_facts['os_family'] == 'RedHat' else 'apache2-utils' }}"
        state: present
      become: true

  ########################################################################
  # 3. Generar hash bcrypt & plantilla Secret
  ########################################################################
    - name: 🔑 Generar línea htpasswd (bcrypt, 12 rounds)
      command: >
        htpasswd -nbB -C 12 {{ argocd_auth_user }} {{ argocd_auth_pass }}
      register: htpasswd_out
      no_log: true
      changed_when: true

    - name: ❌ Abortar si htpasswd falló
      fail:
        msg: "htpasswd no generó salida válida (rc={{ htpasswd_out.rc }})."
      when: htpasswd_out.rc != 0 or htpasswd_out.stdout | length == 0

    - name: 📝 Renderizar Secret no sellado
      template:
        src: "{{ secret_template }}"
        dest: "{{ unsealed_secret_path }}"
      vars:
        namespace_tpl: "{{ argocd_namespace }}"
        secret_name:   "{{ argocd_secret_name }}"
        htpasswd_line: "{{ htpasswd_out.stdout }}"   # <- sin base64; irá en stringData

  ########################################################################
  # 4. Sellar & aplicar
  ########################################################################
    - name: 🔐 Sellar el Secret con kubeseal
      shell: >
        {{ kubeseal_path }}
        --controller-name sealed-secrets-controller
        --controller-namespace kube-system
        --format yaml
        < {{ unsealed_secret_path }} > {{ sealed_secret_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true

    - name: 🗑️ Eliminar Secret sin sellar
      file:
        path: "{{ unsealed_secret_path }}"
        state: absent

    - name: 🚀 Aplicar SealedSecret
      kubernetes.core.k8s:
        state: present
        src: "{{ sealed_secret_path }}"
        kubeconfig: "{{ kubeconfig_path }}"