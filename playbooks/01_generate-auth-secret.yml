# playbooks/01_generate-auth-secret.yml
# 🔐 Generar y sellar el Secret de autenticación básica para el Dashboard de ArgoCD
---
- name: 🔐 Generar y sellar el Secret de basic-auth para ArgoCD Dashboard
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml

  vars:
    files_dir: "{{ playbook_dir }}/files"
    secret_template: "../templates/secrets/basic-auth-secret.yaml.j2"
    rendered_unsealed_secret_path: "{{ files_dir }}/argocd-dashboard-secret-unsealed.yaml"
    sealed_secret_path: "{{ files_dir }}/argocd-dashboard-sealed.yaml"
    argocd_secret_name: "argocd-dashboard-auth"  # 👈 Puedes cambiarlo si lo deseas

  pre_tasks:
    - name: "🛠️ Asegurar que el namespace {{ argocd_namespace }} existe"
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ argocd_namespace }}"
        state: present
        kubeconfig: "{{ kubeconfig_path }}"

    - name: 🔐 Codificar contraseña de admin en base64
      set_fact:
        argocd_admin_password_b64: "{{ argocd_admin_password | b64encode }}"
      when: argocd_admin_password is defined

  tasks:
    - name: 📋 Verificar que kubeseal esté instalado
      stat:
        path: "{{ kubeseal_path }}"
      register: kubeseal_check

    - name: ❌ Abortamos si kubeseal no está instalado
      fail:
        msg: "❌ kubeseal no está instalado en {{ kubeseal_path }}"
      when: not kubeseal_check.stat.exists

    - name: ⚙️ Verificar que las variables estén definidas
      fail:
        msg: "❌ Las variables ARGOCD_AUTH_USER y ARGOCD_AUTH_PASS no están definidas o vacías."
      when: argocd_auth_user | length == 0 or argocd_auth_pass | length == 0

    - name: 🔑 Generar cadena básica con htpasswd (bcrypt)
      shell: echo "{{ argocd_auth_pass }}" | htpasswd -i -B -n "{{ argocd_auth_user }}"
      register: basic_auth_string
      no_log: true

    - name: 🔐 Codificar salida htpasswd en base64
      set_fact:
        basic_auth: "{{ basic_auth_string.stdout | b64encode }}"

    - name: 📝 Renderizar plantilla del Secret no sellado
      template:
        src: "{{ secret_template }}"
        dest: "{{ rendered_unsealed_secret_path }}"
      vars:
        basic_auth: "{{ basic_auth }}"
        namespace_tpl: "{{ argocd_namespace }}"
        secret_name: "{{ argocd_secret_name }}"

    - name: 🔐 Sellar el Secret con kubeseal
      shell: >
        {{ kubeseal_path }}
        --controller-name sealed-secrets-controller
        --controller-namespace kube-system
        --format yaml
        < {{ rendered_unsealed_secret_path }}
        > {{ sealed_secret_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true

    - name: 🗑️ Eliminar el Secret sin sellar
      file:
        path: "{{ rendered_unsealed_secret_path }}"
        state: absent

    - name: 🚀 Aplicar SealedSecret en el clúster
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ sealed_secret_path }}
      register: result
      changed_when: "'created' in result.stdout or 'configured' in result.stdout"