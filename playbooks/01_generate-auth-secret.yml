# playbooks/01_generate-auth-secret.yml
# 🔐 Generar y sellar el Secret de autenticación básica para el Dashboard de Argo CD
---
- name: 🔐 Generar y sellar el Secret de basic-auth para el Dashboard de Argo CD
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml

  vars:
    files_dir: "{{ playbook_dir }}/files"
    secret_template: "../templates/secrets/basic-auth-secret.yaml.j2"
    rendered_unsealed_secret_path: "{{ files_dir }}/argocd-dashboard-secret-unsealed.yaml"
    sealed_secret_path: "{{ files_dir }}/argocd-dashboard-sealed.yaml"

  tasks:

    # 1. Verificar requisitos previos
    - name: 📋 Verificar que kubeseal esté instalado
      stat:
        path: "{{ kubeseal_path }}"
      register: kubeseal_check

    - name: ❌ Abortar si kubeseal no está instalado
      fail:
        msg: "❌ kubeseal no está instalado en {{ kubeseal_path }}."
      when: not kubeseal_check.stat.exists

    - name: ⚙️ Verificar que las variables de autenticación estén definidas
      fail:
        msg: "❌ ARGOCD_AUTH_USER y/o ARGOCD_AUTH_PASS no están definidos o están vacíos."
      when: argocd_auth_user | default('') == '' or argocd_auth_pass | default('') == ''

    # 2. Preparar entorno htpasswd
    - name: 📊 Recoger facts mínimos
      ansible.builtin.setup:
        gather_subset: ['!all', 'min']

    - name: 📦 Instalar herramienta htpasswd
      ansible.builtin.package:
        name: "{{ (ansible_facts.os_family == 'RedHat') | ternary('httpd-tools','apache2-utils') }}"
        state: present
      become: true

    - name: 🔑 Generar línea htpasswd (bcrypt)
      shell: echo "{{ argocd_auth_pass }}" | htpasswd -i -B -n "{{ argocd_auth_user }}"
      register: htpasswd_line
      no_log: true

    - name: 🔐 Codificar línea htpasswd a base64
      set_fact:
        basic_auth: "{{ htpasswd_line.stdout | b64encode }}"

    # 3. Asegurar directorio de trabajo
    - name: 📂 Crear el directorio {{ files_dir }} si no existe
      file:
        path: "{{ files_dir }}"
        state: directory
        mode: '0700'
      become: true

    - name: 🔑 Establecer propietario del directorio
      command: chown -R {{ lookup('env','USER') }}:{{ lookup('env','USER') }} {{ files_dir }}
      become: true
      changed_when: false

    - name: 🔑 Establecer permisos de escritura
      command: chmod -R u+rwX {{ files_dir }}
      become: true
      changed_when: false

    # 4. Renderizar, sellar y aplicar el Secret
    - name: 📝 Renderizar plantilla del Secret no sellado
      template:
        src: "{{ secret_template }}"
        dest: "{{ rendered_unsealed_secret_path }}"
      vars:
        namespace_tpl: "{{ argocd_namespace }}"
        secret_name:   "{{ argocd_secret_name }}"
        basic_auth:    "{{ basic_auth }}"

    - name: 🔐 Sellar el Secret con kubeseal
      shell: >
        {{ kubeseal_path }}
        --controller-name sealed-secrets-controller
        --controller-namespace kube-system
        --format yaml
        < {{ rendered_unsealed_secret_path }} > {{ sealed_secret_path }}
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: true

    - name: 🗑️ Eliminar archivo temporal no sellado
      file:
        path: "{{ rendered_unsealed_secret_path }}"
        state: absent
      changed_when: false

    - name: 🚀 Aplicar SealedSecret al clúster
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ sealed_secret_path }}
      register: apply_res
      changed_when: "'created' in apply_res.stdout or 'configured' in apply_res.stdout"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"