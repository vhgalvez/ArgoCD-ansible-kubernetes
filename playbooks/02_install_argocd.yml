# playbooks/02_install_argocd.yml
# 🧱 Instalación de Argo CD + 🌐 Exposición vía Traefik
---
- name: 🧱 Instalar ArgoCD con Helm y aplicar configuración web
  hosts: localhost
  gather_facts: false
  become: false
  vars_files:
    - ../vars/main.yml

  vars:
    helm_path: "/usr/local/bin/helm"
    values_src: "../templates/argocd/values.yaml.j2"
    values_render: "{{ playbook_dir }}/files/values-argocd.yaml"
    mw_auth_template: "../templates/argocd/argocd-dashboard-middleware.yaml.j2"
    ir_template:  "../templates/argocd/argocd-dashboard-ingressroute-internal.yaml.j2"
    cm_template:  "../templates/argocd/argocd-cm.yaml.j2"
    cmd_template: "../templates/argocd/argocd-cmd-params-cm.yaml.j2"

    mw_auth_manifest: "{{ playbook_dir }}/files/argocd-dashboard-middleware.yaml"
    ir_manifest:      "{{ playbook_dir }}/files/argocd-dashboard-ingressroute.yaml"
    cm_rendered:      "{{ playbook_dir }}/files/argocd-cm.yaml"
    cmd_rendered:     "{{ playbook_dir }}/files/argocd-cmd-params-cm.yaml"

  tasks:

    # 0. Renderizar values.yaml para Helm
    - name: ✍️ Renderizar values.yaml
      template:
        src: "{{ values_src }}"
        dest: "{{ values_render }}"

    # 1. Agregar repositorio Helm
    - name: 📥 Agregar repo Helm de ArgoCD
      command: "{{ helm_path }} repo add argo https://argoproj.github.io/argo-helm"
      changed_when: false

    - name: 🔄 Actualizar repos Helm
      command: "{{ helm_path }} repo update"
      changed_when: false

    # 2. Eliminar Secret conflictivo si existe
    - name: ❌ Eliminar Secret argocd-secret pre-existente
      kubernetes.core.k8s:
        state: absent
        kind: Secret
        name: argocd-secret
        namespace: "{{ argocd_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      failed_when: false
      changed_when: false

    # 3. Instalar Argo CD
    - name: 🚀 Instalar / actualizar ArgoCD con Helm
      command: >
        {{ helm_path }} upgrade --install argocd argo/argo-cd
        --version {{ argocd_chart_version }}
        --namespace {{ argocd_namespace }}
        --create-namespace
        --values {{ values_render }}
      register: helm_res
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      changed_when: "'Release' in helm_res.stdout or helm_res.rc == 0"

    # 4. Reestablecer contraseña del admin
    - name: 🔐 Hashear la contraseña del admin
      command: "htpasswd -nbBC 12 '' '{{ argocd_admin_password_plain }}'"
      register: bcrypt_pw
      changed_when: false

    - name: 🗝️ Secret argocd-secret con pass de admin
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: argocd-secret
            namespace: "{{ argocd_namespace }}"
          type: Opaque
          stringData:
            admin.password: "{{ bcrypt_pw.stdout.split(':')[-1] }}"
            admin.passwordMtime: "{{ lookup('pipe','date -u +%Y-%m-%dT%H:%M:%SZ') }}"

    # 5. Configuración web: ConfigMap, Middleware, IngressRoute
    - name: 📄 Renderizar ConfigMap
      template:
        src: "{{ cm_template }}"
        dest: "{{ cm_rendered }}"

    - name: 🚀 Aplicar ConfigMap
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ cm_rendered }}
      register: cm_res
      changed_when: >
        "'configured' in cm_res.stdout or 'created' in cm_res.stdout"

    - name: 📄 Renderizar Middleware Auth
      template:
        src: "{{ mw_auth_template }}"
        dest: "{{ mw_auth_manifest }}"

    - name: 🚀 Aplicar Middleware Auth
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ mw_auth_manifest }}
      register: mw_res
      changed_when: >
        "'configured' in mw_res.stdout or 'created' in mw_res.stdout"

    - name: 📄 Renderizar IngressRoute
      template:
        src: "{{ ir_template }}"
        dest: "{{ ir_manifest }}"

    - name: 🚀 Aplicar IngressRoute
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ ir_manifest }}
      register: ir_res
      changed_when: >
        "'configured' in ir_res.stdout or 'created' in ir_res.stdout"

    # 6. ConfigMap de parámetros internos de ArgoCD
    - name: 📄 Renderizar argocd-cmd-params-cm
      template:
        src: "{{ cmd_template }}"
        dest: "{{ cmd_rendered }}"

    - name: 🚀 Aplicar argocd-cmd-params-cm
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ cmd_rendered }}
      register: cmd_res
      changed_when: >
        "'configured' in cmd_res.stdout or 'created' in cmd_res.stdout"

    # 7. Rollout restart del servidor de ArgoCD
    - name: 🔁 Reiniciar argocd-server (ignorar si no existe)
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} rollout restart deployment argocd-server -n {{ argocd_namespace }}
      ignore_errors: true
      changed_when: true

    # 8. Limpiar archivos temporales
    - name: 🧹 Limpiar archivos temporales
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ mw_auth_manifest }}"
        - "{{ ir_manifest }}"
        - "{{ cm_rendered }}"
        - "{{ cmd_rendered }}"
        - "{{ values_render }}"