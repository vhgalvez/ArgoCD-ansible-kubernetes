# playbooks/02_install_argocd.yml
# 🌐 Configuración de acceso web de ArgoCD: Secret UI + Middleware Traefik + IngressRoute + TLS

---
- name: 🌐 Aplicar configuración de acceso web para ArgoCD
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml

  vars:
    mw_auth_template: "../templates/argocd/argocd-dashboard-middleware.yaml.j2"
    ir_template: "../templates/argocd/argocd-dashboard-ingressroute-internal.yaml.j2"
    cm_template: "../templates/argocd/argocd-cm.yaml.j2"
    cmd_template: "../templates/argocd/argocd-cmd-params-cm.yaml.j2"

    mw_auth_manifest: "{{ playbook_dir }}/files/argocd-dashboard-middleware.yaml"
    ir_manifest: "{{ playbook_dir }}/files/argocd-dashboard-ingressroute.yaml"
    cm_rendered: "{{ playbook_dir }}/files/argocd-cm.yaml"
    cmd_rendered: "{{ playbook_dir }}/files/argocd-cmd-params-cm.yaml"

  tasks:
    # 🔐 Hashear la contraseña del admin de Argo CD UI
    - name: 🔐 Hashear la contraseña del admin
      command: "htpasswd -nbBC 12 '' '{{ argocd_admin_password_plain }}'"
      register: bcrypt_password_raw
      changed_when: false

    - name: 🧠 Extraer hash de la salida
      set_fact:
        argocd_admin_password_hash: "{{ bcrypt_password_raw.stdout.split(':')[-1] }}"

    - name: 🗝️ Crear o actualizar el Secret argocd-secret
      kubernetes.core.k8s:
        state: present
        namespace: "{{ argocd_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: argocd-secret
          type: Opaque
          stringData:
            admin.password: "{{ argocd_admin_password_hash }}"
            admin.passwordMtime: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"

    # 🧩 ConfigMap con el dominio externo de la UI (sin duplicar server.insecure)
    - name: 📄 Renderizar plantilla del ConfigMap
      template:
        src: "{{ cm_template }}"
        dest: "{{ cm_rendered }}"

    - name: 🚀 Aplicar ConfigMap
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ cm_rendered }}
      register: cm_result
      changed_when: "'created' in cm_result.stdout or 'configured' in cm_result.stdout"

    # 🧩 Middleware de autenticación (Traefik)
    - name: 📄 Renderizar middleware auth
      template:
        src: "{{ mw_auth_template }}"
        dest: "{{ mw_auth_manifest }}"

    - name: 🚀 Aplicar middleware auth
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ mw_auth_manifest }}
      register: mw_auth_result
      changed_when: "'created' in mw_auth_result.stdout or 'configured' in mw_auth_result.stdout"

    # 🧩 IngressRoute protegido con middleware
    - name: 📄 Renderizar IngressRoute
      template:
        src: "{{ ir_template }}"
        dest: "{{ ir_manifest }}"

    - name: 🚀 Aplicar IngressRoute
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ ir_manifest }}
      register: ir_result
      changed_when: "'created' in ir_result.stdout or 'configured' in ir_result.stdout"

    # 🧩 Desactivar TLS interno de ArgoCD
    - name: 📄 Renderizar argocd-cmd-params-cm
      template:
        src: "{{ cmd_template }}"
        dest: "{{ cmd_rendered }}"

    - name: 🚀 Aplicar argocd-cmd-params-cm
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ cmd_rendered }}
      register: cmd_cm_result
      changed_when: "'created' in cmd_cm_result.stdout or 'configured' in cmd_cm_result.stdout"

    # 🔁 Reiniciar el servidor ArgoCD (por cambio de contraseña o config)
    - name: 🔁 Reiniciar argocd-server
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }}
        rollout restart deployment argocd-server -n {{ argocd_namespace }}
      register: restart_result
      changed_when: true

    # 🧹 Limpiar archivos temporales
    - name: 🧹 Borrar archivos temporales
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ mw_auth_manifest }}"
        - "{{ ir_manifest }}"
        - "{{ cm_rendered }}"
        - "{{ cmd_rendered }}"