# playbooks/02_install_argocd.yml
# 🌐 Middleware + IngressRoute para ArgoCD (SOLO auth) + Secret UI
# 🧩 Aplicar configuración de acceso web para ArgoCD
---
- name: 🌐 Aplicar configuración de acceso web para ArgoCD
  hosts: localhost
  gather_facts: false
  become: false

  vars_files:
    - ../vars/main.yml

  vars:
    mw_auth_template: "../templates/argocd/argocd-dashboard-middleware-auth.yaml.j2"
    ir_template: "../templates/argocd/argocd-dashboard-ingressroute-internal.yaml.j2"
    cm_template: "../templates/argocd/argocd-cm.yaml.j2"

    mw_auth_manifest: "{{ playbook_dir }}/files/argocd-dashboard-middleware-auth.yaml"
    ir_manifest: "{{ playbook_dir }}/files/argocd-dashboard-ingressroute.yaml"
    cm_rendered: "{{ playbook_dir }}/files/argocd-cm.yaml"

  tasks:
    - name: ⏳ Esperar que argocd-server esté disponible
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: argocd-server
        namespace: "{{ argocd_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      register: deploy_info
      until: >
        deploy_info.resources
        and deploy_info.resources[0].status.availableReplicas is defined
        and deploy_info.resources[0].status.availableReplicas | int > 0
      retries: 30
      delay: 10

    - name: 🔐 Hashear la contraseña del admin para Argo CD UI
      command: >-
        htpasswd -nbBC 12 "" "{{ argocd_admin_password_plain }}"
      register: bcrypt_password_raw
      changed_when: false

    - name: 🧠 Extraer solo el hash del output
      set_fact:
        argocd_admin_password_hash: "{{ bcrypt_password_raw.stdout.split(':')[-1] }}"

    - name: 🗝️ Crear o actualizar el Secret argocd-secret con nueva contraseña
      kubernetes.core.k8s:
        state: present
        namespace: "{{ argocd_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: argocd-secret
          type: Opaque
          stringData:
            admin.password: "{{ argocd_admin_password_hash }}"
            admin.passwordMtime: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"

    - name: 📄 Renderizar plantilla de ConfigMap
      template:
        src: "{{ cm_template }}"
        dest: "{{ cm_rendered }}"

    - name: 🚀 Aplicar ConfigMap de Argo CD
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ cm_rendered }}
      register: cm_result
      changed_when: "'created' in cm_result.stdout or 'configured' in cm_result.stdout"

    - name: 📄 Renderizar middleware auth
      template:
        src: "{{ mw_auth_template }}"
        dest: "{{ mw_auth_manifest }}"

    - name: 🚀 Aplicar middleware auth
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ mw_auth_manifest }}
      register: mw_auth_result
      changed_when: "'created' in mw_auth_result.stdout or 'configured' in mw_auth_result.stdout"

    - name: 📄 Renderizar IngressRoute
      template:
        src: "{{ ir_template }}"
        dest: "{{ ir_manifest }}"

    - name: 🚀 Aplicar IngressRoute
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ ir_manifest }}
      register: ir_result
      changed_when: "'created' in ir_result.stdout or 'configured' in ir_result.stdout"

    - name: 🧹 Borrar archivos temporales
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ mw_auth_manifest }}"
        - "{{ ir_manifest }}"
        - "{{ cm_rendered }}"

    - name: 🔁 Reiniciar despliegue de argocd-server tras actualizar contraseña
      command: >
        {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }}
        rollout restart deployment argocd-server -n {{ argocd_namespace }}
      register: restart_result
      changed_when: "'restarted' in restart_result.stdout"
      tags: [optional]
