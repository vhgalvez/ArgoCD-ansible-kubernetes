# playbooks/02_install_argocd.yml
# üß± Instalaci√≥n de Argo CD + üåê Exposici√≥n v√≠a Traefik
---
- name: üß± Instalar ArgoCD con Helm y aplicar configuraci√≥n web
  hosts: localhost
  gather_facts: false
  become: false
  vars_files:
    - ../vars/main.yml

  vars:
    helm_path: "/usr/local/bin/helm"
    values_src: "../templates/argocd/values.yaml.j2"
    values_render: "{{ playbook_dir }}/files/values-argocd.yaml"
    mw_auth_template: "../templates/argocd/argocd-dashboard-middleware.yaml.j2"
    ir_template:  "../templates/argocd/argocd-dashboard-ingressroute-internal.yaml.j2"
    cm_template:  "../templates/argocd/argocd-cm.yaml.j2"
    cmd_template: "../templates/argocd/argocd-cmd-params-cm.yaml.j2"

    mw_auth_manifest: "{{ playbook_dir }}/files/argocd-dashboard-middleware.yaml"
    ir_manifest:      "{{ playbook_dir }}/files/argocd-dashboard-ingressroute.yaml"
    cm_rendered:      "{{ playbook_dir }}/files/argocd-cm.yaml"
    cmd_rendered:     "{{ playbook_dir }}/files/argocd-cmd-params-cm.yaml"

  tasks:

  # ------------------------------------------------------------------- #
  # 0. Renderizar el values.yaml para Helm                              #
  # ------------------------------------------------------------------- #
  - name: ‚úçÔ∏è Renderizar values.yaml
    template:
      src: "{{ values_src }}"
      dest: "{{ values_render }}"

  # ------------------------------------------------------------------- #
  # 1. Preparar Helm                                                   #
  # ------------------------------------------------------------------- #
  - name: üì• Agregar repo Helm de ArgoCD
    command: "{{ helm_path }} repo add argo https://argoproj.github.io/argo-helm"
    changed_when: false

  - name: üîÑ Actualizar repos Helm
    command: "{{ helm_path }} repo update"
    changed_when: false

  # ------------------------------------------------------------------- #
  # 2. Eliminar Secret problem√°tico (si existe)  <<<<<<<<<<<<<<<<<<<<<  #
  # ------------------------------------------------------------------- #
  - name: ‚ùå Eliminar Secret argocd-secret pre-existente
    kubernetes.core.k8s:
      state: absent
      kind: Secret
      name: argocd-secret
      namespace: "{{ argocd_namespace }}"
      kubeconfig: "{{ kubeconfig_path }}"
    failed_when: false
    changed_when: false

  # ------------------------------------------------------------------- #
  # 3. Instalar Argo CD con Helm                                        #
  # ------------------------------------------------------------------- #
  - name: üöÄ Instalar / actualizar ArgoCD con Helm
    command: >
      {{ helm_path }} upgrade --install argocd argo/argo-cd
      --version {{ argocd_chart_version }}
      --namespace {{ argocd_namespace }}
      --create-namespace
      --values {{ values_render }}
    register: helm_res
    environment: { KUBECONFIG: "{{ kubeconfig_path }}" }
    changed_when: "'Release' in helm_res.stdout or helm_res.rc == 0"

  # ------------------------------------------------------------------- #
  # 4. Sobrescribir (o crear) contrase√±a admin despu√©s de Helm          #
  # ------------------------------------------------------------------- #
  - name: üîê Hashear la contrase√±a del admin
    command: "htpasswd -nbBC 12 '' '{{ argocd_admin_password_plain }}'"
    register: bcrypt_pw
    changed_when: false

  - name: üóùÔ∏è  Secret argocd-secret con pass de admin
    kubernetes.core.k8s:
      state: present
      kubeconfig: "{{ kubeconfig_path }}"
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: argocd-secret
          namespace: "{{ argocd_namespace }}"
        type: Opaque
        stringData:
          admin.password: "{{ bcrypt_pw.stdout.split(':')[-1] }}"
          admin.passwordMtime: "{{ lookup('pipe','date -u +%Y-%m-%dT%H:%M:%SZ') }}"

  # ------------------------------------------------------------------- #
  # 5. ConfigMap, Middleware y IngressRoute                             #
  # ------------------------------------------------------------------- #
  - name: üìÑ Renderizar CM   ; apply
    template: { src: "{{ cm_template }}",  dest: "{{ cm_rendered }}" }
  - command: "{{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ cm_rendered }}"
    register: cm_res ; changed_when: "'configured' in cm_res.stdout or 'created' in cm_res.stdout"

  - name: üìÑ Renderizar Middleware ; apply
    template: { src: "{{ mw_auth_template }}", dest: "{{ mw_auth_manifest }}" }
  - command: "{{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ mw_auth_manifest }}"
    register: mw_res ; changed_when: "'configured' in mw_res.stdout or 'created' in mw_res.stdout"

  - name: üìÑ Renderizar IngressRoute ; apply
    template: { src: "{{ ir_template }}", dest: "{{ ir_manifest }}" }
  - command: "{{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ ir_manifest }}"
    register: ir_res ; changed_when: "'configured' in ir_res.stdout or 'created' in ir_res.stdout"

  # ------------------------------------------------------------------- #
  # 6. Desactivar TLS interno + restart                                 #
  # ------------------------------------------------------------------- #
  - name: üìÑ Renderizar argocd-cmd-params-cm ; apply
    template: { src: "{{ cmd_template }}", dest: "{{ cmd_rendered }}" }
  - command: "{{ kubectl_path }} --kubeconfig {{ kubeconfig_path }} apply -f {{ cmd_rendered }}"
    register: cmd_res ; changed_when: "'configured' in cmd_res.stdout or 'created' in cmd_res.stdout"

  - name: üîÅ Rollout restart argocd-server (ignorar si a√∫n no est√°)
    command: >
      {{ kubectl_path }} --kubeconfig {{ kubeconfig_path }}
      rollout restart deployment argocd-server -n {{ argocd_namespace }}
    ignore_errors: true
    changed_when: true

  # ------------------------------------------------------------------- #
  # 7. Limpiar archivos temporales                                      #
  # ------------------------------------------------------------------- #
  - name: üßπ Limpiar tmp
    file:
      path: "{{ item }}"
      state: absent
    loop:
      - "{{ mw_auth_manifest }}"
      - "{{ ir_manifest }}"
      - "{{ cm_rendered }}"
      - "{{ cmd_rendered }}"
      - "{{ values_render }}"